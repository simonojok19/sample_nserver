#ifndef N_SMART_CARDS_BIOMETRY_HPP_INCLUDED
#define N_SMART_CARDS_BIOMETRY_HPP_INCLUDED

#include <SmartCards/BerTag.hpp>
namespace Neurotec { namespace SmartCards
{
#include <SmartCards/NSmartCardsBiometry.h>
}}

N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardBiometricType)
N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardBiometricSubtype)
N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardChallengeQualifier)
N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardAuthenticationType)
N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardFmrGrade)

namespace Neurotec { namespace SmartCards
{
#include <Core/NNoDeprecate.h>

#undef SCARD_BIT_TAG_ALGORITHM_REFERENCE
#undef SCARD_BIT_TAG_REFERENCE_DATA_QUALIFIER
#undef SCARD_BIT_TAG_STANDARD_DATA_OBJECTS
#undef SCARD_BIT_TAG_TAG_ALLOCATION_AUTHORITY_DATA_OBJECTS
#undef SCARD_BIT_TAG_BIOMETRIC_HEADER_TEMPLATE
#undef SCARD_BIT_TAG_CONFIGURATION_DATA

#undef SCARD_BIT_BHT_TAG_PATRON_HEADER_VERSION
#undef SCARD_BIT_BHT_TAG_INDEX
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_TYPE
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_SUBTYPE
#undef SCARD_BIT_BHT_TAG_CREATION_DATE
#undef SCARD_BIT_BHT_TAG_CREATOR
#undef SCARD_BIT_BHT_TAG_VALIDITY_PERIOD
#undef SCARD_BIT_BHT_TAG_PRODUCT_IDENTIFIER
#undef SCARD_BIT_BHT_TAG_FORMAT_OWNER
#undef SCARD_BIT_BHT_TAG_FORMAT_TYPE
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_DATA
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_TEMPLATE

// ISO/IEC 19785-3:2007, CBEFF TLV-encoded patron format (for smart cards and other tokens) tag values
#undef SCARD_BIT_BHT_TAG_BIT_INDEX
#undef SCARD_BIT_BHT_TAG_BDT_BIOMETRIC_TYPE
#undef SCARD_BIT_BHT_TAG_BDT_BIOMETRIC_SUBTYPE
#undef SCARD_BIT_BHT_TAG_BDT_CREATION_DATE
#undef SCARD_BIT_BHT_TAG_BIT_CREATOR
#undef SCARD_BIT_BHT_TAG_BDT_VALIDITY_PERIOD
#undef SCARD_BIT_BHT_TAG_BDT_PRODUCT_IDENTIFIER
#undef SCARD_BIT_BHT_TAG_BDT_FORMAT_OWNER
#undef SCARD_BIT_BHT_TAG_BDT_FORMAT_TYPE

// ISO/IEC 19785-3:2007, CBEFF TLV-encoded patron format (for smart cards and other tokens) RFU tag values
#undef SCARD_BIT_BHT_TAG_BDT_CHALLENGE_RESPONSE
#undef SCARD_BIT_BHT_TAG_BDT_INDEX
#undef SCARD_BIT_BHT_TAG_BDT_PROCESSED_LEVEL
#undef SCARD_BIT_BHT_TAG_BDT_PURPOSE
#undef SCARD_BIT_BHT_TAG_BDT_QUALITY
#undef SCARD_BIT_BHT_TAG_BIT_CREATION_DATE
#undef SCARD_BIT_BHT_TAG_BIT_PATRON_FORMAT_OWNER
#undef SCARD_BIT_BHT_TAG_BIT_PATRON_FORMAT_TYPE
#undef SCARD_BIT_BHT_TAG_BIT_VALIDITY_PERIOD
#undef SCARD_BIT_BHT_TAG_CBEFF_VERSION

#undef SCARD_BIT_BHT_TAG_STANDARD_BHT
#undef SCARD_BIT_BHT_TAG_PROPRIETARY_BHT

#undef SCARD_BDT_TAG_CHALLENGE_DATA
#undef SCARD_BDT_TAG_CHALLENGE_TEMPLATE
#undef SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA
#undef SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA_OBJECTS
#undef SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA
#undef SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA_OBJECTS

#undef SCARD_BDT_CT_TAG_CHALLENGE_QUALIFIER
#undef SCARD_BDT_CT_TAG_CHALLENGE

#undef SCARD_BIT_CD_TAG_MAXIMUM_VERIFICATION_DATA_SIZE
#undef SCARD_BIT_CD_TAG_MAXIMUM_REFERENCE_DATA_SIZE
#undef SCARD_BIT_CD_TAG_NUMBER_OF_BIOMETRIC_TEMPLATES
#undef SCARD_BIT_CD_TAG_REENROLLMENT_POSSIBILITY
#undef SCARD_BIT_CD_TAG_MINIMUM_VERIFICATION_DATA_QUALITY
#undef SCARD_BIT_CD_TAG_INITIAL_RETRY_COUNTER
#undef SCARD_BIT_CD_TAG_INTERNAL_QUALITY_RESTRICTIONS
#undef SCARD_BIT_CD_TAG_PROPIETARY_DATA
#undef SCARD_BIT_CD_TAG_AUTHENTICATION_TYPE_AND_FMR_GRADE
#undef SCARD_BIT_CD_TAG_ALGORITHM_IDENTIFIER

#undef SCARD_BIT_BHT_BAPT_TAG_FEATURE_COUNT_OR_LENGTH
#undef SCARD_BIT_BHT_BAPT_TAG_FEATURE_ORDER
#undef SCARD_BIT_BHT_BAPT_TAG_EXTENDED_FEATURE_HANDLING_INDICATOR
#undef SCARD_BIT_BHT_BAPT_TAG_ALIGNMENT
#undef SCARD_BIT_BHT_BAPT_TAG_MINIMUM_VERIFICATION_DATA_QUALITY
#undef SCARD_BIT_BHT_BAPT_TAG_AUTHENTICATION_TYPE_AND_FMR_GRADE
#undef SCARD_BIT_BHT_BAPT_TAG_MAXIMUM_RESPONSE_TIME

const BerTag SCARD_BIT_TAG_ALGORITHM_REFERENCE(0x80);
const BerTag SCARD_BIT_TAG_REFERENCE_DATA_QUALIFIER(0x83);
const BerTag SCARD_BIT_TAG_STANDARD_DATA_OBJECTS(0xA0);
const BerTag SCARD_BIT_TAG_TAG_ALLOCATION_AUTHORITY_DATA_OBJECTS(0xA1);
const BerTag SCARD_BIT_TAG_BIOMETRIC_HEADER_TEMPLATE(SCARD_BIT_TAG_TAG_ALLOCATION_AUTHORITY_DATA_OBJECTS);
const BerTag SCARD_BIT_TAG_CONFIGURATION_DATA(0xB1);

// ISO/IEC 19785-3:2007, CBEFF TLV-encoded patron format (for smart cards and other tokens) tag values
const BerTag SCARD_BIT_BHT_TAG_PATRON_HEADER_VERSION(0x80);
const BerTag SCARD_BIT_BHT_TAG_BIT_INDEX(0x90);
const BerTag SCARD_BIT_BHT_TAG_BDT_BIOMETRIC_TYPE(0x81);
const BerTag SCARD_BIT_BHT_TAG_BDT_BIOMETRIC_SUBTYPE(0x82);
const BerTag SCARD_BIT_BHT_TAG_BDT_CREATION_DATE(0x83);
const BerTag SCARD_BIT_BHT_TAG_BIT_CREATOR(0x84);
const BerTag SCARD_BIT_BHT_TAG_BDT_VALIDITY_PERIOD(0x85);
const BerTag SCARD_BIT_BHT_TAG_BDT_PRODUCT_IDENTIFIER(0x86);
const BerTag SCARD_BIT_BHT_TAG_BDT_FORMAT_OWNER(0x87);
const BerTag SCARD_BIT_BHT_TAG_BDT_FORMAT_TYPE(0x88);
const BerTag SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_DATA(0x91);
const BerTag SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_TEMPLATE(0xB1);

// ISO/IEC 19785-3:2007, CBEFF TLV-encoded patron format (for smart cards and other tokens) RFU tag values
const BerTag SCARD_BIT_BHT_TAG_BDT_CHALLENGE_RESPONSE(0x93);
const BerTag SCARD_BIT_BHT_TAG_BDT_INDEX(0x94);
const BerTag SCARD_BIT_BHT_TAG_BDT_PROCESSED_LEVEL(0x95);
const BerTag SCARD_BIT_BHT_TAG_BDT_PURPOSE(0x96);
const BerTag SCARD_BIT_BHT_TAG_BDT_QUALITY(0x97);
const BerTag SCARD_BIT_BHT_TAG_BIT_CREATION_DATE(0x98);
const BerTag SCARD_BIT_BHT_TAG_BIT_PATRON_FORMAT_OWNER(0x99);
const BerTag SCARD_BIT_BHT_TAG_BIT_PATRON_FORMAT_TYPE(0x9A);
const BerTag SCARD_BIT_BHT_TAG_BIT_VALIDITY_PERIOD(0x9B);
const BerTag SCARD_BIT_BHT_TAG_CBEFF_VERSION(0x9C);

const BerTag SCARD_BIT_BHT_TAG_STANDARD_BHT(0xA1);
const BerTag SCARD_BIT_BHT_TAG_PROPRIETARY_BHT(0xA2);

const BerTag SCARD_BDT_TAG_CHALLENGE_DATA(0x80);
const BerTag SCARD_BDT_TAG_CHALLENGE_TEMPLATE(0xA0);
const BerTag SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA(0x81);
const BerTag SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA_OBJECTS(0xA1);
const BerTag SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA(0x82);
const BerTag SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA_OBJECTS(0xA2);

const BerTag SCARD_BDT_CT_TAG_CHALLENGE_QUALIFIER(0x90);
const BerTag SCARD_BDT_CT_TAG_CHALLENGE(0x80);

const BerTag SCARD_BIT_CD_TAG_MAXIMUM_VERIFICATION_DATA_SIZE(0x80);
const BerTag SCARD_BIT_CD_TAG_MAXIMUM_REFERENCE_DATA_SIZE(0x81);
const BerTag SCARD_BIT_CD_TAG_NUMBER_OF_BIOMETRIC_TEMPLATES(0x82);
const BerTag SCARD_BIT_CD_TAG_REENROLLMENT_POSSIBILITY(0x83);
const BerTag SCARD_BIT_CD_TAG_MINIMUM_VERIFICATION_DATA_QUALITY(0x85);
const BerTag SCARD_BIT_CD_TAG_INITIAL_RETRY_COUNTER(0x86);
const BerTag SCARD_BIT_CD_TAG_INTERNAL_QUALITY_RESTRICTIONS(0x87);
const BerTag SCARD_BIT_CD_TAG_PROPIETARY_DATA(0x8F);
const BerTag SCARD_BIT_CD_TAG_AUTHENTICATION_TYPE_AND_FMR_GRADE(0x90);
const BerTag SCARD_BIT_CD_TAG_ALGORITHM_IDENTIFIER(0xA4);

const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_FEATURE_COUNT_OR_LENGTH(0x81);
const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_FEATURE_ORDER(0x82);
const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_EXTENDED_FEATURE_HANDLING_INDICATOR(0x83);
const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_ALIGNMENT(0x84);
const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_MINIMUM_VERIFICATION_DATA_QUALITY(0x85);
const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_AUTHENTICATION_TYPE_AND_FMR_GRADE(0x90);
const ::Neurotec::SmartCards::BerTag SCARD_BIT_BHT_BAPT_TAG_MAXIMUM_RESPONSE_TIME(0x91);

class NSmartCardsBiometry
{
	N_DECLARE_STATIC_OBJECT_CLASS(NSmartCardsBiometry)

public:
	static NType SCardBiometricTypeNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardBiometricType), true);
	}

	static NType SCardBiometricSubtypeNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardBiometricSubtype), true);
	}

	static NType SCardChallengeQualifierNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardChallengeQualifier), true);
	}

	static NType SCardAuthenticationTypeNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardAuthenticationType), true);
	}

	static NType SCardFmrGradeNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardFmrGrade), true);
	}

	static bool AuthenticationTypeIsValid(SCardAuthenticationType authType)
	{
		return NSmartCardBiometryAuthenticationTypeIsValid(authType) != NFalse;
	}

	static bool FmrGradeIsValid(SCardFmrGrade fmrGrade)
	{
		return NSmartCardBiometryFmrGradeIsValid(fmrGrade) != NFalse;
	}

	static bool AuthenticationTypeAndFmrGradeByteIsValid(NByte authTypeAndFmrGradeByte)
	{
		return NSmartCardBiometryAuthenticationTypeAndFmrGradeByteIsValid(authTypeAndFmrGradeByte) != NFalse;
	}

	static NByte MakeAuthenticationTypeAndFmrGradeByte(SCardAuthenticationType authType, SCardFmrGrade fmrGrade)
	{
		NByte value;
		NCheck(NSmartCardBiometryMakeAuthenticationTypeAndFmrGradeByte(authType, fmrGrade, &value));
		return value;
	}

	static SCardAuthenticationType GetAuthenticationType(NByte authTypeAndFmrGradeByte)
	{
		SCardAuthenticationType value;
		NSmartCardBiometryGetAuthenticationType(authTypeAndFmrGradeByte, &value);
		return value;
	}

	static SCardFmrGrade GetFmrGrade(NByte authTypeAndFmrGradeByte)
	{
		SCardFmrGrade value;
		NCheck(NSmartCardBiometryGetFmrGrade(authTypeAndFmrGradeByte, &value));
		return value;
	}

};

#include <Core/NReDeprecate.h>
}}

#endif // !N_SMART_CARDS_BIOMETRY_HPP_INCLUDED
